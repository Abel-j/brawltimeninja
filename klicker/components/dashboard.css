@layer utilities {
  .var--rows-1 {
    --rows: 1;
  }
  .var--rows-2 {
    --rows: 2;
  }
  .var--rows-3 {
    --rows: 3;
  }
  .var--rows-4 {
    --rows: 4;
  }
  .var--rows-5 {
    --rows: 5;
  }
  .var--rows-6 {
    --rows: 6;
  }
  .var--columns-1 {
    --columns: 1
  }
  .var--columns-2 {
    --columns: 2;
  }
  .var--columns-3 {
    --columns: 3;
  }
  .var--columns-4 {
    --columns: 4;
  }
  .var--columns-5 {
    --columns: 5;
  }
  .var--columns-6 {
    --columns: 6;
  }
}

@layer components {
  .dashboard {
    display: grid;
    /*
     * Add as many rows as necessary, at least 125px.
     * If the min-content is more than 125px, stretch that row.
     */
    grid-auto-rows: minmax(135px, min-content);
  }

  .dashboard {
    /*
     * Apply defaults: normal gaps, responsive and vertical.
     */
    @apply dashboard--normal dashboard--responsive dashboard--vertical;
  }

  .dashboard--vertical {
    /*
     * Densely pack rows, filling remaining space.
     */
    grid-auto-flow: row dense;
  }

  .dashboard--horizontal {
    /*
     * Render as few rows as possible and scroll horizontally.
     */
    grid-auto-flow: column dense;
    overflow-x: auto;
  }

  .dashboard--responsive {
    /*
     * Fit as many columns as possible, each at least 125px wide.
     * If the min-content is more than 125px, stretch the columns.
     */
    grid-template-columns: repeat(auto-fill, minmax(135px, auto));
  }

  .dashboard--fixed {
    /*
     * Set a fixed width and scroll horizontally.
     */
    --columns: 12;
    grid-template-columns: repeat(var(--columns), minmax(135px, auto));
    overflow-x: auto;
  }

  .dashboard--normal {
    /*
     * Add a gap so the desktop layout looks less cramped.
     * Cells spanning multiple rows/columns can use this space.
     */
    grid-gap: 15px;
  }

  .dashboard--relaxed {
    grid-gap: 30px;
  }

  .dashboard__cell {
    --rows: 1;
    --columns: 1;
  }

  .dashboard .dashboard__cell {
    grid-row: span var(--rows) / span var(--rows);
    grid-column: span var(--columns) / span var(--columns);
  }

  .dashboard--responsive .dashboard__cell {
    grid-column: span min(1, var(--columns)) / span min(1, var(--columns));
  }
  @media (min-width: 300px) {
    .dashboard--responsive .dashboard__cell {
      grid-column: span min(2, var(--columns)) / span min(2, var(--columns));
    }
  }
  @media (min-width: 450px) {
    .dashboard--responsive .dashboard__cell {
      grid-column: span min(3, var(--columns)) / span min(3, var(--columns));
    }
  }
  @media (min-width: 600px) {
    .dashboard--responsive .dashboard__cell {
      grid-column: span min(4, var(--columns)) / span min(4, var(--columns));
    }
  }
  @media (min-width: 750px) {
    .dashboard--responsive .dashboard__cell {
      grid-column: span min(5, var(--columns)) / span min(5, var(--columns));
    }
  }
  @media (min-width: 900px) {
    .dashboard--responsive .dashboard__cell {
      grid-column: span min(6, var(--columns)) / span min(6, var(--columns));
    }
  }
  @media (min-width: 1050px) {
    .dashboard--responsive .dashboard__cell {
      grid-column: span min(7, var(--columns)) / span min(7, var(--columns));
    }
  }
  @media (min-width: 1200px) {
    .dashboard--responsive .dashboard__cell {
      grid-column: span min(8, var(--columns)) / span min(8, var(--columns));
    }
  }
}
